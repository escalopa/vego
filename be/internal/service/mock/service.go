// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/escalopa/vego/internal/domain"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// Mockdatabase is a mock of database interface.
type Mockdatabase struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMockRecorder
}

// MockdatabaseMockRecorder is the mock recorder for Mockdatabase.
type MockdatabaseMockRecorder struct {
	mock *Mockdatabase
}

// NewMockdatabase creates a new mock instance.
func NewMockdatabase(ctrl *gomock.Controller) *Mockdatabase {
	mock := &Mockdatabase{ctrl: ctrl}
	mock.recorder = &MockdatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdatabase) EXPECT() *MockdatabaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *Mockdatabase) CreateUser(ctx context.Context, user *domain.User, provider string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user, provider)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockdatabaseMockRecorder) CreateUser(ctx, user, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Mockdatabase)(nil).CreateUser), ctx, user, provider)
}

// GetUser mocks base method.
func (m *Mockdatabase) GetUser(ctx context.Context, userID int64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockdatabaseMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Mockdatabase)(nil).GetUser), ctx, userID)
}

// MockuserTokenProvider is a mock of userTokenProvider interface.
type MockuserTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockuserTokenProviderMockRecorder
}

// MockuserTokenProviderMockRecorder is the mock recorder for MockuserTokenProvider.
type MockuserTokenProviderMockRecorder struct {
	mock *MockuserTokenProvider
}

// NewMockuserTokenProvider creates a new mock instance.
func NewMockuserTokenProvider(ctrl *gomock.Controller) *MockuserTokenProvider {
	mock := &MockuserTokenProvider{ctrl: ctrl}
	mock.recorder = &MockuserTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserTokenProvider) EXPECT() *MockuserTokenProviderMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockuserTokenProvider) CreateToken(userID int64, email string) (*domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userID, email)
	ret0, _ := ret[0].(*domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockuserTokenProviderMockRecorder) CreateToken(userID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockuserTokenProvider)(nil).CreateToken), userID, email)
}

// VerifyToken mocks base method.
func (m *MockuserTokenProvider) VerifyToken(token string) (*domain.UserTokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token)
	ret0, _ := ret[0].(*domain.UserTokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockuserTokenProviderMockRecorder) VerifyToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockuserTokenProvider)(nil).VerifyToken), token)
}

// MockroomTokenProvider is a mock of roomTokenProvider interface.
type MockroomTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockroomTokenProviderMockRecorder
}

// MockroomTokenProviderMockRecorder is the mock recorder for MockroomTokenProvider.
type MockroomTokenProviderMockRecorder struct {
	mock *MockroomTokenProvider
}

// NewMockroomTokenProvider creates a new mock instance.
func NewMockroomTokenProvider(ctrl *gomock.Controller) *MockroomTokenProvider {
	mock := &MockroomTokenProvider{ctrl: ctrl}
	mock.recorder = &MockroomTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockroomTokenProvider) EXPECT() *MockroomTokenProviderMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockroomTokenProvider) CreateToken(userID int64, roomID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userID, roomID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockroomTokenProviderMockRecorder) CreateToken(userID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockroomTokenProvider)(nil).CreateToken), userID, roomID)
}

// VerifyToken mocks base method.
func (m *MockroomTokenProvider) VerifyToken(token string) (*domain.RoomTokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token)
	ret0, _ := ret[0].(*domain.RoomTokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockroomTokenProviderMockRecorder) VerifyToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockroomTokenProvider)(nil).VerifyToken), token)
}

// Mockhub is a mock of hub interface.
type Mockhub struct {
	ctrl     *gomock.Controller
	recorder *MockhubMockRecorder
}

// MockhubMockRecorder is the mock recorder for Mockhub.
type MockhubMockRecorder struct {
	mock *Mockhub
}

// NewMockhub creates a new mock instance.
func NewMockhub(ctrl *gomock.Controller) *Mockhub {
	mock := &Mockhub{ctrl: ctrl}
	mock.recorder = &MockhubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhub) EXPECT() *MockhubMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *Mockhub) Handle(user *domain.User, roomID string, conn *websocket.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", user, roomID, conn)
}

// Handle indicates an expected call of Handle.
func (mr *MockhubMockRecorder) Handle(user, roomID, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Mockhub)(nil).Handle), user, roomID, conn)
}

// MockoauthProvider is a mock of oauthProvider interface.
type MockoauthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockoauthProviderMockRecorder
}

// MockoauthProviderMockRecorder is the mock recorder for MockoauthProvider.
type MockoauthProviderMockRecorder struct {
	mock *MockoauthProvider
}

// NewMockoauthProvider creates a new mock instance.
func NewMockoauthProvider(ctrl *gomock.Controller) *MockoauthProvider {
	mock := &MockoauthProvider{ctrl: ctrl}
	mock.recorder = &MockoauthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoauthProvider) EXPECT() *MockoauthProviderMockRecorder {
	return m.recorder
}

// GetRedirectURL mocks base method.
func (m *MockoauthProvider) GetRedirectURL(provider string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedirectURL", provider)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedirectURL indicates an expected call of GetRedirectURL.
func (mr *MockoauthProviderMockRecorder) GetRedirectURL(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedirectURL", reflect.TypeOf((*MockoauthProvider)(nil).GetRedirectURL), provider)
}

// HandleCallback mocks base method.
func (m *MockoauthProvider) HandleCallback(ctx context.Context, provider, code string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCallback", ctx, provider, code)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCallback indicates an expected call of HandleCallback.
func (mr *MockoauthProviderMockRecorder) HandleCallback(ctx, provider, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCallback", reflect.TypeOf((*MockoauthProvider)(nil).HandleCallback), ctx, provider, code)
}
